var documenterSearchIndex = {"docs":
[{"location":"#","page":"Home","title":"Home","text":"CurrentModule = WignerFamilies","category":"page"},{"location":"#WignerFamilies-1","page":"Home","title":"WignerFamilies","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [WignerFamilies]","category":"page"},{"location":"#WignerFamilies.nonclassical_wigner3j-Union{Tuple{Tn}, Tuple{Type{#s19} where #s19<:Real,Tn,Tn,Tn,Tn}} where Tn","page":"Home","title":"WignerFamilies.nonclassical_wigner3j","text":"nonclassical_wigner3j(T::Type{<:Real}, j₂::Tn, j₃::Tn, m₂::Tn, m₃::Tn) where {T, Tn}\n\nComputes all allowed j₁ given fixed j₂, j₃, m₂, m₃, m₁=-m₂-m₃. This only is guarantted to work in non-classical regions.\n\nArguments\n\nT::Type{<:Real}: output array type\nj₂::Tn: quantum number\nj₃::Tn: quantum number\nm₂::Tn: quantum number\nm₃::Tn: quantum number\n\nReturns\n\nTuple{Vector{Int}, Vector{T}}: j₁ values and wigner symbols\n\n\n\n\n\n","category":"method"},{"location":"#WignerFamilies.classical_wigner3j_m0-Union{Tuple{Tn}, Tuple{Type{#s19} where #s19<:Real,Tn,Tn,Tn,Tn}} where Tn","page":"Home","title":"WignerFamilies.classical_wigner3j_m0","text":"classical_wigner3j_m0(T::Type{<:Real}, j₂::Tn, j₃::Tn, m₂::Tn, m₃::Tn) where {T, Tn}\n\nComputes all allowed j₁ given fixed j₂, j₃, m₁ + m₂ + m₃ = 0. This applies the classical three-term recurrence relation and iterates two at a time, since all odd ∑jᵢ are zero. Unlike other Wigner symbols, this special case requires iterating outwards, as one must recur towards increasing |fⱼ| for stability.\n\nArguments\n\nT::Type{<:Real}: output array type\nj₂::Tn: quantum number\nj₃::Tn: quantum number\nm₂::Tn: quantum number\n\nReturns\n\nTuple{Vector{Int}, Vector{T}}: j₁ values and wigner symbols\n\n\n\n\n\n","category":"method"},{"location":"#WignerFamilies.swap_triangular-Tuple{Any}","page":"Home","title":"WignerFamilies.swap_triangular","text":"Evens out an array which scales linearly with difficulty by swapping elements such that [1,2,3,4,5,6] is mapped to [1,6,2,5,3,4].\n\n\n\n\n\n","category":"method"}]
}
